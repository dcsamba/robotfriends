{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","username","id","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","target","value","filteredRobots","filter","robot","toLowerCase","includes","style","overflowY","border","height","fetch","then","response","json","users","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAkBeA,EAhBF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAEhC,OACI,mCAEI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAKJ,EAAUK,IAAG,+BAA0BJ,EAA1B,cACvB,gCACI,6BAAKF,IACL,4BAAIG,aCYTI,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,SAAUO,EAAOG,GAAGV,SACpBE,MAAOK,EAAOG,GAAGR,OAJZQ,SCKlBC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIU,SAAUD,EACVT,UAAU,mCACVW,KAAK,SACLC,YAAY,yBCoBbC,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHC,E,qDASnB,SAAkBC,EAAOC,GAErBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WAEI,OAAIG,KAAKJ,MAAMC,SACJ,uEAGJG,KAAKL,MAAMO,a,GArBCC,aCqDZC,E,kDAhDX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAT1C,EAAKb,MAAQ,CACT,OAAU,GACV,YAAe,IALT,E,0CAiBd,WAEI,MAAgCI,KAAKJ,MAA7BX,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,YACVG,EAAiBzB,EAAO0B,QAAO,SAAAC,GAEjC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASP,EAAYM,kBAEzD,OACI,sBAAKhC,UAAU,KAAf,UACI,oBAAIA,UAAU,eAAd,0BACA,cAAC,EAAD,CAAWS,aAAcU,KAAKK,iBAC9B,qBAAKU,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjC,OAAQyB,a,+BAQtC,WAAqB,IAAD,OAEhBS,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKtB,SAAS,CAAEhB,OAAQsC,W,GA3CjCpB,aCMHqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.08a3ff37.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\n\nconst Card = ({ name, username, id, email }) => {\n   \n    return (\n        <>\n            {/* <h1>RoboFriends</h1> */}\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img alt={username} src={`https://robohash.org/${id}?200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={robots[i].id} \n                            name={robots[i].name} \n                            username={robots[i].username} \n                            email={robots[i].email}\n                        />\n                    );  \n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react'\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                onChange={searchChange} \n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"search\" \n                placeholder=\"Chercher un robot\"\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n\n    }\n    \n    //Fonction équivalente du try-catch\n    componentDidCatch(error, info) {\n        //S'il y a une erreur on change l'état d'erreur en vrai\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        //Si l'état d'erreur est vrai on envoi un message d'erreur\n        if (this.state.hasError) {\n            return <h1>Oooops. Une erreur s'est produite !!!</h1>\n        }\n        //Sinon on retourne les composants enfants passé en paramètre sur ${ErrorBoundry}\n        return this.props.children;\n        \n    }\n    \n}\n\nexport default ErrorBoundry;\n","import React, {Component} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport ErrorBoundry from '../components/ErrorBoundry'\n\n//Class du commposant parent principal\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            'robots': [],\n            'searchField': ''\n        }\n    }\n\n    //Fonction qui peut être utiliser sur les composants enfants\n    onSearchChange = (event) => {\n        //On change l'état du searchField (Valeur de l'input)\n        this.setState({ searchField: event.target.value })\n\n    }\n\n    //Le rendu du composant principal\n    render() {\n        //Factorisation du code avec les variables\n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            //si searchField est inclu dans le robotName (tout en minuscule)\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        return (\n            <div className='tc'>\n                <h1 className=\"f1 ttu green\">RobotFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </div>\n            </div>\n        )\n    }\n\n    //Lorsque le rendu est afficher exécute ...\n    componentDidMount() {\n        //On récupère les données du web et on met à jour l'état [robots]\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n       \n    }\n    \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}